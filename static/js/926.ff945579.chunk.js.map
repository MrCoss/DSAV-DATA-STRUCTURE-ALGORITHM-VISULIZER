{"version":3,"file":"static/js/926.ff945579.chunk.js","mappings":"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","sources":["components/shared/ActionButton.js","components/Graph/GraphDisplay.js","components/Graph/GraphVisualizer.js","components/shared/Controls.js","components/shared/CodeInsightBox.js","components/shared/ValueInput.js"],"sourcesContent":["import React from 'react';\r\nimport { motion } from 'framer-motion';\r\n\r\nconst ActionButton = ({ children, onClick, className = '', disabled = false }) => {\r\n  return (\r\n    <motion.button\r\n      onClick={onClick}\r\n      disabled={disabled}\r\n      className={`\r\n        flex items-center justify-center gap-2 px-4 py-2 rounded-lg font-semibold \r\n        text-white shadow-md transition-all duration-300 ease-in-out\r\n        focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-background\r\n        ${disabled ? 'bg-gray-500 cursor-not-allowed' : 'bg-primary hover:bg-opacity-80 focus:ring-primary'}\r\n        ${className}\r\n      `}\r\n      whileHover={{ scale: disabled ? 1 : 1.05 }}\r\n      whileTap={{ scale: disabled ? 1 : 0.95 }}\r\n    >\r\n      {children}\r\n    </motion.button>\r\n  );\r\n};\r\n\r\nexport default ActionButton;\r\n","import React, { useEffect, useRef } from 'react';\r\nimport * as d3 from 'd3';\r\nimport { motion } from 'framer-motion';\r\n\r\nconst GraphDisplay = ({ graph, highlightedNode, highlightedEdge }) => {\r\n    const svgRef = useRef();\r\n\r\n    useEffect(() => {\r\n        if (!graph || !svgRef.current) return;\r\n\r\n        const svg = d3.select(svgRef.current);\r\n        const width = svg.node().getBoundingClientRect().width;\r\n        const height = svg.node().getBoundingClientRect().height;\r\n\r\n        // Clear previous render\r\n        svg.selectAll(\"*\").remove();\r\n\r\n        // Add definitions for markers\r\n        const defs = svg.append(\"defs\");\r\n        defs.append(\"linearGradient\")\r\n            .attr(\"id\", \"arrow-gradient\")\r\n            .attr(\"x1\", \"0%\").attr(\"y1\", \"0%\")\r\n            .attr(\"x2\", \"100%\").attr(\"y2\", \"0%\")\r\n            .selectAll(\"stop\")\r\n            .data([\r\n                { offset: \"0%\", color: \"#e94560\" },\r\n                { offset: \"100%\", color: \"#53a9ff\" }\r\n            ])\r\n            .enter().append(\"stop\")\r\n            .attr(\"offset\", d => d.offset)\r\n            .attr(\"stop-color\", d => d.color);\r\n            \r\n        defs.append(\"marker\")\r\n            .attr(\"id\", \"arrowhead\")\r\n            .attr(\"viewBox\", \"-0 -5 10 10\")\r\n            .attr(\"refX\", 23)\r\n            .attr(\"refY\", 0)\r\n            .attr(\"orient\", \"auto\")\r\n            .attr(\"markerWidth\", 8)\r\n            .attr(\"markerHeight\", 8)\r\n            .attr(\"xoverflow\", \"visible\")\r\n            .append(\"svg:path\")\r\n            .attr(\"d\", \"M 0,-5 L 10 ,0 L 0,5\")\r\n            .attr(\"fill\", \"url(#arrow-gradient)\")\r\n            .style(\"stroke\", \"none\");\r\n\r\n        const simulation = d3.forceSimulation(graph.nodes)\r\n            .force(\"link\", d3.forceLink(graph.edges).id(d => d.id).distance(120))\r\n            .force(\"charge\", d3.forceManyBody().strength(-300))\r\n            .force(\"center\", d3.forceCenter(width / 2, height / 2))\r\n            .force(\"x\", d3.forceX(width / 2).strength(0.1))\r\n            .force(\"y\", d3.forceY(height / 2).strength(0.1));\r\n\r\n        const edge = svg.append(\"g\")\r\n            .selectAll(\"line\")\r\n            .data(graph.edges)\r\n            .join(\"line\")\r\n            .attr(\"stroke-width\", 3)\r\n            .attr(\"stroke\", d => (highlightedEdge && highlightedEdge.source === d.source.id && highlightedEdge.target === d.target.id) ? \"url(#arrow-gradient)\" : \"#999\")\r\n            .attr(\"marker-end\", \"url(#arrowhead)\");\r\n\r\n        const node = svg.append(\"g\")\r\n            .selectAll(\"circle\")\r\n            .data(graph.nodes)\r\n            .join(\"circle\")\r\n            .attr(\"r\", 25)\r\n            .attr(\"fill\", d => d.id === highlightedNode ? \"#e94560\" : \"#16213e\")\r\n            .attr(\"stroke\", d => d.id === highlightedNode ? \"#e94560\" : \"#53a9ff\")\r\n            .attr(\"stroke-width\", 3)\r\n            .call(d3.drag()\r\n                .on(\"start\", dragstarted)\r\n                .on(\"drag\", dragged)\r\n                .on(\"end\", dragended));\r\n\r\n        const label = svg.append(\"g\")\r\n            .selectAll(\"text\")\r\n            .data(graph.nodes)\r\n            .join(\"text\")\r\n            .text(d => d.id)\r\n            .attr(\"dy\", 5)\r\n            .attr(\"text-anchor\", \"middle\")\r\n            .attr(\"fill\", \"#dcdcdc\")\r\n            .style(\"font-weight\", \"bold\");\r\n\r\n        simulation.on(\"tick\", () => {\r\n            edge\r\n                .attr(\"x1\", d => d.source.x)\r\n                .attr(\"y1\", d => d.source.y)\r\n                .attr(\"x2\", d => d.target.x)\r\n                .attr(\"y2\", d => d.target.y);\r\n\r\n            node\r\n                .attr(\"cx\", d => d.x)\r\n                .attr(\"cy\", d => d.y);\r\n\r\n            label\r\n                .attr(\"x\", d => d.x)\r\n                .attr(\"y\", d => d.y);\r\n        });\r\n        \r\n        function dragstarted(event, d) {\r\n            if (!event.active) simulation.alphaTarget(0.3).restart();\r\n            d.fx = d.x;\r\n            d.fy = d.y;\r\n        }\r\n\r\n        function dragged(event, d) {\r\n            d.fx = event.x;\r\n            d.fy = event.y;\r\n        }\r\n\r\n        function dragended(event, d) {\r\n            if (!event.active) simulation.alphaTarget(0);\r\n            d.fx = null;\r\n            d.fy = null;\r\n        }\r\n\r\n    }, [graph, highlightedNode, highlightedEdge]);\r\n\r\n    return (\r\n        <motion.svg ref={svgRef} width=\"100%\" height=\"100%\" initial={{ opacity: 0 }} animate={{ opacity: 1 }} />\r\n    );\r\n};\r\n\r\nexport default GraphDisplay;\r\n","import React, { useState, useCallback } from 'react';\r\nimport { motion, AnimatePresence } from 'framer-motion';\r\nimport { Share2, Link, XCircle, AlertTriangle, GitFork } from 'lucide-react';\r\n\r\n// Import shared components\r\nimport Controls from '../shared/Controls';\r\nimport ActionButton from '../shared/ActionButton';\r\nimport ValueInput from '../shared/ValueInput';\r\nimport CodeInsightBox from '../shared/CodeInsightBox';\r\nimport GraphDisplay from './GraphDisplay';\r\n\r\nconst GraphVisualizer = () => {\r\n    const [graph, setGraph] = useState({\r\n        nodes: [{ id: 'A' }, { id: 'B' }, { id: 'C' }, { id: 'D' }],\r\n        edges: [{ source: 'A', target: 'B' }, { source: 'A', target: 'C' }, { source: 'B', target: 'D' }],\r\n    });\r\n    const [nodeId, setNodeId] = useState('');\r\n    const [edgeSource, setEdgeSource] = useState('');\r\n    const [edgeTarget, setEdgeTarget] = useState('');\r\n    const [startNode, setStartNode] = useState('A');\r\n    const [highlightedNode, setHighlightedNode] = useState(null);\r\n    const [highlightedEdge, setHighlightedEdge] = useState(null);\r\n    const [error, setError] = useState('');\r\n\r\n    // --- Code Insight Logic ---\r\n    const getScript = (operation) => {\r\n        const scripts = {\r\n            bfs: [\r\n                'void BFS(int startNode) {',\r\n                '  queue.push(startNode);',\r\n                '  visited[startNode] = true;',\r\n                '  while (!queue.empty()) {',\r\n                '    // ... process node ...',\r\n                '    // ... add neighbors to queue ...',\r\n                '  }',\r\n                '}',\r\n            ],\r\n            dfs: [\r\n                'void DFS(int node) {',\r\n                '  visited[node] = true;',\r\n                '  // ... process node ...',\r\n                '  for (int neighbor : adj[node]) {',\r\n                '    if (!visited[neighbor]) {',\r\n                '      DFS(neighbor);',\r\n                '    }',\r\n                '  }',\r\n                '}',\r\n            ],\r\n        };\r\n        return scripts[operation] || scripts.bfs;\r\n    };\r\n\r\n    const initialInsight = {\r\n        title: 'Graph',\r\n        script: getScript('bfs'),\r\n        points: [\r\n            'A collection of nodes (or vertices) and edges that connect them.',\r\n            'Can be directed or undirected, weighted or unweighted.',\r\n            'Used to model networks, social connections, and maps.',\r\n            'Common traversal algorithms are <strong>BFS</strong> and <strong>DFS</strong>.'\r\n        ],\r\n        complexity: {\r\n            time: { 'Add Vertex': 'O(1)', 'Add Edge': 'O(1)', 'BFS/DFS': 'O(V+E)' },\r\n            space: 'O(V+E)'\r\n        }\r\n    };\r\n\r\n    const [insight, setInsight] = useState(initialInsight);\r\n\r\n    const flashError = (message) => {\r\n        setError(message);\r\n        setTimeout(() => setError(''), 3000);\r\n    };\r\n\r\n    const highlightNode = (id, duration) => {\r\n        setHighlightedNode(id);\r\n        setTimeout(() => setHighlightedNode(null), duration);\r\n    };\r\n    \r\n    const highlightEdge = (source, target, duration) => {\r\n        setHighlightedEdge({ source, target });\r\n        setTimeout(() => setHighlightedEdge(null), duration);\r\n    };\r\n\r\n    // --- Operation Handlers ---\r\n    const handleAddNode = () => {\r\n        setError('');\r\n        if (!nodeId) {\r\n            flashError(\"Node ID cannot be empty.\");\r\n            return;\r\n        }\r\n        if (graph.nodes.find(n => n.id === nodeId)) {\r\n            flashError(`Node \"${nodeId}\" already exists.`);\r\n            return;\r\n        }\r\n        setGraph(g => ({ ...g, nodes: [...g.nodes, { id: nodeId }] }));\r\n        setNodeId('');\r\n    };\r\n\r\n    const handleAddEdge = () => {\r\n        setError('');\r\n        if (!edgeSource || !edgeTarget) {\r\n            flashError(\"Source and Target IDs are required.\");\r\n            return;\r\n        }\r\n        if (!graph.nodes.find(n => n.id === edgeSource) || !graph.nodes.find(n => n.id === edgeTarget)) {\r\n            flashError(\"Both source and target nodes must exist.\");\r\n            return;\r\n        }\r\n        if (graph.edges.find(e => e.source === edgeSource && e.target === edgeTarget)) {\r\n            flashError(\"Edge already exists.\");\r\n            return;\r\n        }\r\n        setGraph(g => ({ ...g, edges: [...g.edges, { source: edgeSource, target: edgeTarget }] }));\r\n        setEdgeSource('');\r\n        setEdgeTarget('');\r\n    };\r\n    \r\n    const runTraversal = (algo) => {\r\n        setError('');\r\n        if (!graph.nodes.find(n => n.id === startNode)) {\r\n            flashError(`Start node \"${startNode}\" does not exist.`);\r\n            return;\r\n        }\r\n        \r\n        setInsight({\r\n            title: algo.toUpperCase(),\r\n            script: getScript(algo.toLowerCase()),\r\n            points: [`Running ${algo.toUpperCase()} from node <strong>${startNode}</strong>.`],\r\n            complexity: { time: { 'Traversal': 'O(V+E)' }, space: 'O(V)' }\r\n        });\r\n\r\n        const visited = new Set();\r\n        const traversalOrder = [];\r\n        const queue = algo === 'BFS' ? [startNode] : [];\r\n        const stack = algo === 'DFS' ? [startNode] : [];\r\n\r\n        const process = () => {\r\n            if (algo === 'BFS' && queue.length === 0) return;\r\n            if (algo === 'DFS' && stack.length === 0) return;\r\n\r\n            const currentId = algo === 'BFS' ? queue.shift() : stack.pop();\r\n\r\n            if (visited.has(currentId)) {\r\n                process();\r\n                return;\r\n            }\r\n\r\n            visited.add(currentId);\r\n            traversalOrder.push(currentId);\r\n            highlightNode(currentId, 500 * (traversalOrder.length + 1));\r\n            \r\n            const neighbors = graph.edges\r\n                .filter(e => e.source === currentId)\r\n                .map(e => e.target);\r\n            \r\n            for (const neighbor of neighbors) {\r\n                if (!visited.has(neighbor)) {\r\n                    if (algo === 'BFS') queue.push(neighbor);\r\n                    if (algo === 'DFS') stack.push(neighbor);\r\n                }\r\n            }\r\n            setTimeout(process, 500);\r\n        };\r\n        process();\r\n    };\r\n\r\n\r\n    const handleClear = () => {\r\n        setGraph({ nodes: [], edges: [] });\r\n        setInsight(initialInsight);\r\n        setError('');\r\n    };\r\n\r\n    return (\r\n        <div className=\"grid grid-cols-1 xl:grid-cols-2 gap-8 items-start\">\r\n            <div className=\"relative\">\r\n                <AnimatePresence>\r\n                    {error && (\r\n                        <motion.div\r\n                            className=\"absolute -top-14 left-1/2 -translate-x-1/2 w-full max-w-md bg-error text-white p-3 rounded-lg shadow-lg flex items-center gap-3\"\r\n                            initial={{ opacity: 0, y: -20, scale: 0.9 }}\r\n                            animate={{ opacity: 1, y: 0, scale: 1 }}\r\n                            exit={{ opacity: 0, y: -20, scale: 0.9 }}\r\n                        >\r\n                            <AlertTriangle />\r\n                            <span>{error}</span>\r\n                        </motion.div>\r\n                    )}\r\n                </AnimatePresence>\r\n                <div className=\"bg-surface/60 p-4 rounded-xl min-h-[30rem] h-[30rem] border border-secondary shadow-xl\">\r\n                   <GraphDisplay graph={graph} highlightedNode={highlightedNode} highlightedEdge={highlightedEdge} />\r\n                </div>\r\n                <Controls>\r\n                    <ValueInput value={nodeId} onChange={e => setNodeId(e.target.value.toUpperCase())} placeholder=\"Node ID\" />\r\n                    <ActionButton onClick={handleAddNode}><Share2 size={18} /> Add Node</ActionButton>\r\n                </Controls>\r\n                 <Controls>\r\n                    <ValueInput value={edgeSource} onChange={e => setEdgeSource(e.target.value.toUpperCase())} placeholder=\"Source\" />\r\n                    <ValueInput value={edgeTarget} onChange={e => setEdgeTarget(e.target.value.toUpperCase())} placeholder=\"Target\" />\r\n                    <ActionButton onClick={handleAddEdge}><Link size={18} /> Add Edge</ActionButton>\r\n                </Controls>\r\n                 <Controls>\r\n                    <ValueInput value={startNode} onChange={e => setStartNode(e.target.value.toUpperCase())} placeholder=\"Start Node\" />\r\n                    <ActionButton onClick={() => runTraversal('BFS')} className=\"bg-blue-600 hover:bg-blue-700 focus:ring-blue-500\"><GitFork size={18} /> BFS</ActionButton>\r\n                    <ActionButton onClick={() => runTraversal('DFS')} className=\"bg-green-600 hover:bg-green-700 focus:ring-green-500\"><GitFork size={18} /> DFS</ActionButton>\r\n                    <ActionButton onClick={handleClear} className=\"bg-gray-600 hover:bg-gray-700 focus:ring-gray-500\"><XCircle size={18} /> Clear</ActionButton>\r\n                </Controls>\r\n            </div>\r\n            <CodeInsightBox {...insight} key={insight.title + insight.points[0]} />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default GraphVisualizer;\r\n","import React from 'react';\r\n\r\nconst Controls = ({ children }) => {\r\n  return (\r\n    <div className=\"bg-surface/80 backdrop-blur-sm p-4 mt-8 rounded-xl border border-secondary shadow-lg\">\r\n      <div className=\"flex flex-wrap items-center justify-center gap-4\">\r\n        {children}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Controls;\r\n","import React from 'react';\r\nimport { motion } from 'framer-motion';\r\nimport { CheckCircle, Clock } from 'lucide-react';\r\n\r\nconst CodeInsightBox = ({ title, script, highlightedLines = [], points = [], complexity = {} }) => {\r\n    return (\r\n        <motion.div \r\n            className=\"bg-surface p-6 rounded-xl border border-secondary shadow-2xl animate-fadeIn\"\r\n            initial={{ opacity: 0, y: 20 }}\r\n            animate={{ opacity: 1, y: 0 }}\r\n            transition={{ duration: 0.5 }}\r\n        >\r\n            <h3 className=\"text-2xl font-bold text-primary mb-4\">{title}</h3>\r\n            \r\n            {/* Code Snippet */}\r\n            <div className=\"bg-background p-4 rounded-lg mb-6\">\r\n                <pre className=\"text-sm\">\r\n                    {script.map((line, index) => (\r\n                        <motion.div\r\n                            key={index}\r\n                            className={`transition-all duration-300 p-1 rounded ${highlightedLines.includes(index) ? 'bg-primary/20 text-white' : 'text-gray-400'}`}\r\n                            initial={{ opacity: 0 }}\r\n                            animate={{ opacity: 1 }}\r\n                            transition={{ delay: index * 0.05 }}\r\n                        >\r\n                            <code>{line}</code>\r\n                        </motion.div>\r\n                    ))}\r\n                </pre>\r\n            </div>\r\n\r\n            {/* Key Points */}\r\n            <div className=\"mb-6\">\r\n                <h4 className=\"font-bold text-highlight mb-2\">Key Points</h4>\r\n                <ul className=\"space-y-2\">\r\n                    {points.map((point, index) => (\r\n                        <motion.li \r\n                            key={index} \r\n                            className=\"flex items-start gap-2 text-text\"\r\n                            initial={{ opacity: 0, x: -10 }}\r\n                            animate={{ opacity: 1, x: 0 }}\r\n                            transition={{ delay: 0.3 + index * 0.1 }}\r\n                        >\r\n                            <CheckCircle className=\"w-5 h-5 text-success flex-shrink-0 mt-1\" />\r\n                            <span dangerouslySetInnerHTML={{ __html: point }} />\r\n                        </motion.li>\r\n                    ))}\r\n                </ul>\r\n            </div>\r\n\r\n            {/* Complexity Analysis */}\r\n            <div>\r\n                <h4 className=\"font-bold text-highlight mb-3\">Complexity</h4>\r\n                <div className=\"flex flex-col sm:flex-row gap-4\">\r\n                    {complexity.time && (\r\n                        <div className=\"flex-1 bg-background/50 p-3 rounded-lg\">\r\n                            <h5 className=\"font-semibold text-sm mb-2 flex items-center gap-2\"><Clock size={16} /> Time Complexity</h5>\r\n                            <div className=\"flex justify-around text-center text-xs\">\r\n                                {Object.entries(complexity.time).map(([key, value]) => (\r\n                                    <div key={key}>\r\n                                        <div className=\"font-bold text-primary\">{value}</div>\r\n                                        <div className=\"text-gray-400\">{key}</div>\r\n                                    </div>\r\n                                ))}\r\n                            </div>\r\n                        </div>\r\n                    )}\r\n                    {complexity.space && (\r\n                        <div className=\"flex-1 bg-background/50 p-3 rounded-lg\">\r\n                            <h5 className=\"font-semibold text-sm mb-2 flex items-center gap-2\"><Clock size={16} /> Space Complexity</h5>\r\n                            <div className=\"text-center text-xs\">\r\n                                <div className=\"font-bold text-primary\">{complexity.space}</div>\r\n                                <div className=\"text-gray-400\">Overall</div>\r\n                            </div>\r\n                        </div>\r\n                    )}\r\n                </div>\r\n            </div>\r\n        </motion.div>\r\n    );\r\n};\r\n\r\nexport default CodeInsightBox;\r\n","import React from 'react';\r\n\r\nconst ValueInput = ({ value, onChange, placeholder, type = 'text', className = '' }) => {\r\n  return (\r\n    <input\r\n      type={type}\r\n      value={value}\r\n      onChange={onChange}\r\n      placeholder={placeholder}\r\n      className={`\r\n        bg-background border-2 border-secondary rounded-lg px-4 py-2\r\n        text-text placeholder-gray-500 w-32\r\n        focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent\r\n        transition-all duration-300\r\n        ${className}\r\n      `}\r\n      autoComplete=\"off\"\r\n    />\r\n  );\r\n};\r\n\r\nexport default ValueInput;\r\n"],"names":["_ref","children","onClick","className","disabled","_jsx","motion","button","concat","whileHover","scale","whileTap","graph","highlightedNode","highlightedEdge","svgRef","useRef","useEffect","current","svg","d3","width","node","getBoundingClientRect","height","selectAll","remove","defs","append","attr","data","offset","color","enter","d","style","simulation","nodes","force","edges","id","distance","strength","edge","join","source","target","call","on","event","active","alphaTarget","restart","fx","x","fy","y","label","text","ref","initial","opacity","animate","GraphVisualizer","setGraph","useState","nodeId","setNodeId","edgeSource","setEdgeSource","edgeTarget","setEdgeTarget","startNode","setStartNode","setHighlightedNode","setHighlightedEdge","error","setError","getScript","operation","scripts","bfs","dfs","initialInsight","title","script","points","complexity","time","space","insight","setInsight","flashError","message","setTimeout","runTraversal","algo","find","n","toUpperCase","toLowerCase","visited","Set","traversalOrder","queue","stack","process","length","currentId","shift","pop","has","highlightNode","duration","add","push","neighbors","filter","e","map","neighbor","_jsxs","AnimatePresence","div","exit","AlertTriangle","GraphDisplay","Controls","ValueInput","value","onChange","placeholder","ActionButton","handleAddNode","g","_objectSpread","Share2","size","handleAddEdge","Link","GitFork","handleClear","XCircle","_createElement","CodeInsightBox","key","highlightedLines","transition","line","index","includes","delay","point","li","CheckCircle","dangerouslySetInnerHTML","__html","Clock","Object","entries","_ref2","type","autoComplete"],"sourceRoot":""}